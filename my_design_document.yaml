type: spec.insomnia.rest/5.0
name: My Design Document
meta:
  id: wrk_e0065bef44864de88f0ddf6c4a8a2e50
  created: 1743435944057
  modified: 1743435944057
collection:
  - name: pet
    meta:
      id: fld_d244b32e6e994025af15faba40049daa
      created: 1743435968766
      modified: 1743435968766
      sortKey: -1743435968766
      description: Everything about your Pets
    children:
      - url: "{{ _.base_url }}/pet"
        name: Add a new pet to the store
        meta:
          id: req_e719b946b2034a3f86a3292b9d35d617
          created: 1743435968773
          modified: 1743435968773
          isPrivate: false
          sortKey: -1743435968773
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "id": 0,
              "category": {
                "id": 0,
                "name": "string"
              },
              "name": "doggie",
              "photoUrls": [
                "string"
              ],
              "tags": [
                {
                  "id": 0,
                  "name": "string"
                }
              ],
              "status": "string"
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet"
        name: Update an existing pet
        meta:
          id: req_ec83896eb82e4e6a97171b1f859d12d4
          created: 1743435968774
          modified: 1743435968774
          isPrivate: false
          sortKey: -1743435968774
        method: PUT
        body:
          mimeType: application/json
          text: |-
            {
              "id": 0,
              "category": {
                "id": 0,
                "name": "string"
              },
              "name": "doggie",
              "photoUrls": [
                "string"
              ],
              "tags": [
                {
                  "id": 0,
                  "name": "string"
                }
              ],
              "status": "string"
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet/findByTags"
        name: Finds Pets by tags
        meta:
          id: req_eb684788350c442bace3f1b31c822ddb
          created: 1743435968779
          modified: 1743435989764
          isPrivate: false
          description: Multiple tags can be provided with comma separated strings. Use
            tag1, tag2, tag3 for testing.
          sortKey: -1743435968780
        method: GET
        parameters:
          - name: tags
            disabled: false
            value: string
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet/findByStatus"
        name: Finds Pets by status
        meta:
          id: req_f5ba40a4577a49e1ac2888d19b90683d
          created: 1743435968779
          modified: 1743435968779
          isPrivate: false
          description: Multiple status values can be provided with comma separated strings
          sortKey: -1743435968779
        method: GET
        parameters:
          - name: status
            disabled: false
            value: available
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet/{{ _.petId }}"
        name: Updates a pet in the store with form data
        meta:
          id: req_05fe62f2a1c64b51a5716d86c5f7ad48
          created: 1743435968780
          modified: 1743435968780
          isPrivate: false
          sortKey: -1743435968780
        method: POST
        body:
          mimeType: application/x-www-form-urlencoded
        headers:
          - name: Content-Type
            disabled: false
            value: application/x-www-form-urlencoded
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet/{{ _.petId }}"
        name: Find pet by ID
        meta:
          id: req_d3100386581540fd89b3c37dacc27740
          created: 1743435968780
          modified: 1743435968780
          isPrivate: false
          description: Returns a single pet
          sortKey: -1743435968780
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/pet/{{ _.petId }}"
        name: Deletes a pet
        meta:
          id: req_5236525ef6b2462fb78e79e48abf4f00
          created: 1743435968781
          modified: 1743435968781
          isPrivate: false
          sortKey: -1743435968781
        method: DELETE
        headers:
          - name: api_key
            disabled: true
            value: string
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
  - name: store
    meta:
      id: fld_d56fbc0b58c841ffadc12650af7779fb
      created: 1743435968767
      modified: 1743435968767
      sortKey: -1743435968767
      description: Access to Petstore orders
    children:
      - url: "{{ _.base_url }}/store/inventory"
        name: Returns pet inventories by status
        meta:
          id: req_0ef53b64a1c34a85ad56acce4c00edce
          created: 1743435968781
          modified: 1743435968781
          isPrivate: false
          description: Returns a map of status codes to quantities
          sortKey: -1743435968781
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/store/order/{{ _.orderId }}"
        name: Find purchase order by ID
        meta:
          id: req_10753d63d9bd4adb8a5b09a1c214f53b
          created: 1743435968782
          modified: 1743435968782
          isPrivate: false
          description: For valid response try integer IDs with value >= 1 and <= 10. Other
            values will generated exceptions
          sortKey: -1743435968782
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/store/order"
        name: Place an order for a pet
        meta:
          id: req_80f93519ae61429997a52c3fe4345775
          created: 1743435968782
          modified: 1743435968782
          isPrivate: false
          sortKey: -1743435968782
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "id": 0,
              "petId": 0,
              "quantity": 0,
              "shipDate": "2025-03-31T15:46:08.756Z",
              "status": "string",
              "complete": true
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/store/order/{{ _.orderId }}"
        name: Delete purchase order by ID
        meta:
          id: req_a7d4df0b64cf4fcab6e3de6ed1043a6a
          created: 1743435968782
          modified: 1743435968782
          isPrivate: false
          description: For valid response try integer IDs with positive integer value.
            Negative or non-integer values will generate API errors
          sortKey: -1743435968782
        method: DELETE
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
  - name: user
    meta:
      id: fld_c0fd86b877134aa58791222d965823c1
      created: 1743435968768
      modified: 1743435968768
      sortKey: -1743435968768
      description: Operations about user
    children:
      - url: "{{ _.base_url }}/user"
        name: Create user
        meta:
          id: req_441252edc04e4585a0ca4eb1f085d6af
          created: 1743435968782
          modified: 1743435968782
          isPrivate: false
          description: This can only be done by the logged in user.
          sortKey: -1743435968782
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "id": 0,
              "username": "string",
              "firstName": "string",
              "lastName": "string",
              "email": "string",
              "password": "string",
              "phone": "string",
              "userStatus": 0
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/createWithArray"
        name: Creates list of users with given input array
        meta:
          id: req_b7f5e866bae14797b86559c96b369967
          created: 1743435968782
          modified: 1743435968782
          isPrivate: false
          sortKey: -1743435968782
        method: POST
        body:
          mimeType: application/json
          text: |-
            [
              {
                "id": 0,
                "username": "string",
                "firstName": "string",
                "lastName": "string",
                "email": "string",
                "password": "string",
                "phone": "string",
                "userStatus": 0
              }
            ]
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/createWithList"
        name: Creates list of users with given input array
        meta:
          id: req_0e7081f5a44f4f819c1aa4139b7c42ac
          created: 1743435968783
          modified: 1743435968783
          isPrivate: false
          sortKey: -1743435968783
        method: POST
        body:
          mimeType: application/json
          text: |-
            [
              {
                "id": 0,
                "username": "string",
                "firstName": "string",
                "lastName": "string",
                "email": "string",
                "password": "string",
                "phone": "string",
                "userStatus": 0
              }
            ]
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/login"
        name: Logs user into the system
        meta:
          id: req_201e62ae1df84ce8b052afebe4684ec0
          created: 1743435968783
          modified: 1743435968783
          isPrivate: false
          sortKey: -1743435968783
        method: GET
        parameters:
          - name: username
            disabled: false
            value: string
          - name: password
            disabled: false
            value: string
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/logout"
        name: Logs out current logged in user session
        meta:
          id: req_60869cf98d3a46e99cc8cf637f58dce6
          created: 1743435968784
          modified: 1743435968784
          isPrivate: false
          sortKey: -1743435968784
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/{{ _.username }}"
        name: Updated user
        meta:
          id: req_6258a5c9b6654d4aabc4b225d6e924a6
          created: 1743435968784
          modified: 1743435968784
          isPrivate: false
          description: This can only be done by the logged in user.
          sortKey: -1743435968784
        method: PUT
        body:
          mimeType: application/json
          text: |-
            {
              "id": 0,
              "username": "string",
              "firstName": "string",
              "lastName": "string",
              "email": "string",
              "password": "string",
              "phone": "string",
              "userStatus": 0
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/{{ _.username }}"
        name: Get user by user name
        meta:
          id: req_8caa1b40f6844fafaa62421425ff0420
          created: 1743435968784
          modified: 1743435968784
          isPrivate: false
          sortKey: -1743435968784
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/user/{{ _.username }}"
        name: Delete user
        meta:
          id: req_a583412ff58341fab1840f93d440e728
          created: 1743435968784
          modified: 1743435968784
          isPrivate: false
          description: This can only be done by the logged in user.
          sortKey: -1743435968784
        method: DELETE
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
cookieJar:
  name: Default Jar
  meta:
    id: jar_9b8cca23d42d65dd5782c4ca1da6e0c45b676cd4
    created: 1743435944065
    modified: 1743435944065
environments:
  name: Base Environment
  meta:
    id: env_9b8cca23d42d65dd5782c4ca1da6e0c45b676cd4
    created: 1743435944064
    modified: 1743435968761
    isPrivate: false
  data:
    base_url: "{{ _.scheme }}://{{ _.host }}{{ _.base_path }}"
  subEnvironments:
    - name: OpenAPI env petstore.swagger.io
      meta:
        id: env_392264a1204b44709d999c8658d598ae
        created: 1743435968764
        modified: 1743435968764
        isPrivate: false
        sortKey: 1743435968764
      data:
        scheme: https
        base_path: /v2
        host: petstore.swagger.io
spec:
  contents:
    openapi: 3.0.0
    info:
      description: "This is a sample server Petstore server.  You can find out more
        about Swagger at [http://swagger.io](http://swagger.io) or on
        [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample,
        you can use the api key 'special-key' to test the authorization
        filters."
      version: 1.0.3
      title: Swagger Petstore
      termsOfService: http://swagger.io/terms/
      contact:
        email: apiteam@swagger.io
      license:
        name: Apache 2.0
        url: http://www.apache.org/licenses/LICENSE-2.0.html
    tags:
      - name: pet
        description: Everything about your Pets
        externalDocs:
          description: Find out more
          url: http://swagger.io
      - name: store
        description: Access to Petstore orders
      - name: user
        description: Operations about user
        externalDocs:
          description: Find out more about our store
          url: http://swagger.io
    paths:
      /pet:
        post:
          tags:
            - pet
          summary: Add a new pet to the store
          operationId: addPet
          requestBody:
            $ref: "#/components/requestBodies/Pet"
          responses:
            "405":
              description: Invalid input
        put:
          tags:
            - pet
          summary: Update an existing pet
          operationId: updatePet
          requestBody:
            $ref: "#/components/requestBodies/Pet"
          responses:
            "400":
              description: Invalid ID supplied
            "404":
              description: Pet not found
            "405":
              description: Validation exception
      /pet/findByStatus:
        get:
          tags:
            - pet
          summary: Finds Pets by status
          description: Multiple status values can be provided with comma separated strings
          operationId: findPetsByStatus
          parameters:
            - name: status
              in: query
              description: Status values that need to be considered for filter
              required: true
              explode: true
              schema:
                type: array
                items:
                  type: string
                  enum:
                    - available
                    - pending
                    - sold
                  default: available
          responses:
            "200":
              description: successful operation
              content:
                application/xml:
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/Pet"
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/Pet"
            "400":
              description: Invalid status value
      /pet/findByTags:
        get:
          tags:
            - pet
          summary: Finds Pets by tags
          description: Multiple tags can be provided with comma separated strings. Use
            tag1, tag2, tag3 for testing.
          operationId: findPetsByTags
          parameters:
            - name: tags
              in: query
              description: Tags to filter by
              required: true
              explode: true
              schema:
                type: array
                items:
                  type: string
          responses:
            "200":
              description: successful operation
              content:
                application/xml:
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/Pet"
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/Pet"
            "400":
              description: Invalid tag value
          deprecated: true
      "/pet/{petId}":
        get:
          tags:
            - pet
          summary: Find pet by ID
          description: Returns a single pet
          operationId: getPetById
          parameters:
            - name: petId
              in: path
              description: ID of pet to return
              required: true
              schema:
                type: integer
                format: int64
          responses:
            "200":
              description: successful operation
              content:
                application/xml:
                  schema:
                    $ref: "#/components/schemas/Pet"
                application/json:
                  schema:
                    $ref: "#/components/schemas/Pet"
            "400":
              description: Invalid ID supplied
            "404":
              description: Pet not found
        post:
          tags:
            - pet
          summary: Updates a pet in the store with form data
          operationId: updatePetWithForm
          parameters:
            - name: petId
              in: path
              description: ID of pet that needs to be updated
              required: true
              schema:
                type: integer
                format: int64
          requestBody:
            content:
              application/x-www-form-urlencoded:
                schema:
                  type: object
                  properties:
                    name:
                      description: Updated name of the pet
                      type: string
                    status:
                      description: Updated status of the pet
                      type: string
          responses:
            "405":
              description: Invalid input
        delete:
          tags:
            - pet
          summary: Deletes a pet
          operationId: deletePet
          parameters:
            - name: api_key
              in: header
              required: false
              schema:
                type: string
            - name: petId
              in: path
              description: Pet id to delete
              required: true
              schema:
                type: integer
                format: int64
          responses:
            "400":
              description: Invalid ID supplied
            "404":
              description: Pet not found
      /store/inventory:
        get:
          tags:
            - store
          summary: Returns pet inventories by status
          description: Returns a map of status codes to quantities
          operationId: getInventory
          responses:
            "200":
              description: successful operation
              content:
                application/json:
                  schema:
                    type: object
                    additionalProperties:
                      type: integer
                      format: int32
      /store/order:
        post:
          tags:
            - store
          summary: Place an order for a pet
          operationId: placeOrder
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Order"
            description: order placed for purchasing the pet
            required: true
          responses:
            "200":
              description: successful operation
              content:
                application/xml:
                  schema:
                    $ref: "#/components/schemas/Order"
                application/json:
                  schema:
                    $ref: "#/components/schemas/Order"
            "400":
              description: Invalid Order
      "/store/order/{orderId}":
        get:
          tags:
            - store
          summary: Find purchase order by ID
          description: For valid response try integer IDs with value >= 1 and <= 10. Other
            values will generated exceptions
          operationId: getOrderById
          parameters:
            - name: orderId
              in: path
              description: ID of pet that needs to be fetched
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
                maximum: 10
          responses:
            "200":
              description: successful operation
              content:
                application/xml:
                  schema:
                    $ref: "#/components/schemas/Order"
                application/json:
                  schema:
                    $ref: "#/components/schemas/Order"
            "400":
              description: Invalid ID supplied
            "404":
              description: Order not found
        delete:
          tags:
            - store
          summary: Delete purchase order by ID
          description: For valid response try integer IDs with positive integer value.
            Negative or non-integer values will generate API errors
          operationId: deleteOrder
          parameters:
            - name: orderId
              in: path
              description: ID of the order that needs to be deleted
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
          responses:
            "400":
              description: Invalid ID supplied
            "404":
              description: Order not found
      /user:
        post:
          tags:
            - user
          summary: Create user
          description: This can only be done by the logged in user.
          operationId: createUser
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
            description: Created user object
            required: true
          responses:
            default:
              description: successful operation
      /user/createWithArray:
        post:
          tags:
            - user
          summary: Creates list of users with given input array
          operationId: createUsersWithArrayInput
          requestBody:
            $ref: "#/components/requestBodies/UserArray"
          responses:
            default:
              description: successful operation
      /user/createWithList:
        post:
          tags:
            - user
          summary: Creates list of users with given input array
          operationId: createUsersWithListInput
          requestBody:
            $ref: "#/components/requestBodies/UserArray"
          responses:
            default:
              description: successful operation
      /user/login:
        get:
          tags:
            - user
          summary: Logs user into the system
          operationId: loginUser
          parameters:
            - name: username
              in: query
              description: The user name for login
              required: true
              schema:
                type: string
            - name: password
              in: query
              description: The password for login in clear text
              required: true
              schema:
                type: string
          responses:
            "200":
              description: successful operation
              headers:
                X-Rate-Limit:
                  description: calls per hour allowed by the user
                  schema:
                    type: integer
                    format: int32
                X-Expires-After:
                  description: date in UTC when token expires
                  schema:
                    type: string
                    format: date-time
              content:
                application/xml:
                  schema:
                    type: string
                application/json:
                  schema:
                    type: string
            "400":
              description: Invalid username/password supplied
      /user/logout:
        get:
          tags:
            - user
          summary: Logs out current logged in user session
          operationId: logoutUser
          responses:
            default:
              description: successful operation
      "/user/{username}":
        get:
          tags:
            - user
          summary: Get user by user name
          operationId: getUserByName
          parameters:
            - name: username
              in: path
              description: "The name that needs to be fetched. Use user1 for testing. "
              required: true
              schema:
                type: string
          responses:
            "200":
              description: successful operation
              content:
                application/xml:
                  schema:
                    $ref: "#/components/schemas/User"
                application/json:
                  schema:
                    $ref: "#/components/schemas/User"
            "400":
              description: Invalid username supplied
            "404":
              description: User not found
        put:
          tags:
            - user
          summary: Updated user
          description: This can only be done by the logged in user.
          operationId: updateUser
          parameters:
            - name: username
              in: path
              description: name that need to be updated
              required: true
              schema:
                type: string
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
            description: Updated user object
            required: true
          responses:
            "400":
              description: Invalid user supplied
            "404":
              description: User not found
        delete:
          tags:
            - user
          summary: Delete user
          description: This can only be done by the logged in user.
          operationId: deleteUser
          parameters:
            - name: username
              in: path
              description: The name that needs to be deleted
              required: true
              schema:
                type: string
          responses:
            "400":
              description: Invalid username supplied
            "404":
              description: User not found
    externalDocs:
      description: Find out more about Swagger
      url: http://swagger.io
    servers:
      - url: https://petstore.swagger.io/v2
    components:
      requestBodies:
        UserArray:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
          description: List of user object
          required: true
        Pet:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
          description: Pet object that needs to be added to the store
          required: true
      schemas:
        Order:
          type: object
          properties:
            id:
              type: integer
              format: int64
            petId:
              type: integer
              format: int64
            quantity:
              type: integer
              format: int32
            shipDate:
              type: string
              format: date-time
            status:
              type: string
              description: Order Status
              enum:
                - placed
                - approved
                - delivered
            complete:
              type: boolean
              default: false
          xml:
            name: Order
        User:
          type: object
          properties:
            id:
              type: integer
              format: int64
            username:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
            password:
              type: string
            phone:
              type: string
            userStatus:
              type: integer
              format: int32
              description: User Status
          xml:
            name: User
        Category:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
          xml:
            name: Category
        Tag:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
          xml:
            name: Tag
        Pet:
          type: object
          required:
            - name
            - photoUrls
          properties:
            id:
              type: integer
              format: int64
            category:
              $ref: "#/components/schemas/Category"
            name:
              type: string
              example: doggie
            photoUrls:
              type: array
              xml:
                name: photoUrl
                wrapped: true
              items:
                type: string
            tags:
              type: array
              xml:
                name: tag
                wrapped: true
              items:
                $ref: "#/components/schemas/Tag"
            status:
              type: string
              description: pet status in the store
              enum:
                - available
                - pending
                - sold
          xml:
            name: Pet
        ApiResponse:
          type: object
          properties:
            code:
              type: integer
              format: int32
            type:
              type: string
            message:
              type: string
  meta:
    id: spc_c38d235e88c7425dbfbf683cb8113316
    created: 1743435948378
    modified: 1743496781715
